# 1. Pembuatan Class Buku
class Buku:
    def __init__(self, judul, penulis, penerbit, tahun_terbit, konten, iktisar):
        self.judul = judul
        self.penulis = penulis
        self.penerbit = penerbit
        self.tahun_terbit = tahun_terbit
        self.konten = konten
        self.iktisar = iktisar
    
    def read(self, halaman):
        print(self.konten[:halaman])
    
    def __str__(self):
        return f"{self.judul} by {self.penulis}"

# 2. Pembuatan Tabel Buku pada Database MySQL
import mysql.connector

def create_table():
    connection = mysql.connector.connect(
        host="localhost",
        user="root",
        password="password",
        database="perpustakaan"
    )
    
    cursor = connection.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS buku (
        id INT AUTO_INCREMENT PRIMARY KEY,
        judul VARCHAR(255) NOT NULL,
        penulis VARCHAR(255) NOT NULL,
        penerbit VARCHAR(255) NOT NULL,
        tahun_terbit INT NOT NULL,
        konten TEXT,
        iktisar TEXT
    )
    """)
    
    connection.close()

create_table()

# 3. Pembuatan Method GET dan POST dengan FastAPI
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import mysql.connector

app = FastAPI()

class BukuModel(BaseModel):
    judul: str
    penulis: str
    penerbit: str
    tahun_terbit: int
    konten: str
    iktisar: str

@app.post("/buku/")
def create_buku(buku: BukuModel):
    connection = mysql.connector.connect(
        host="localhost",
        user="root",
        password="password",
        database="perpustakaan"
    )
    
    cursor = connection.cursor()
    sql = "INSERT INTO buku (judul, penulis, penerbit, tahun_terbit, konten, iktisar) VALUES (%s, %s, %s, %s, %s, %s)"
    val = (buku.judul, buku.penulis, buku.penerbit, buku.tahun_terbit, buku.konten, buku.iktisar)
    cursor.execute(sql, val)
    connection.commit()
    connection.close()
    
    return {"message": "Buku created successfully"}

@app.get("/buku/{buku_id}")
def read_buku(buku_id: int):
    connection = mysql.connector.connect(
        host="localhost",
        user="root",
        password="password",
        database="perpustakaan"
    )
    
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM buku WHERE id = %s", (buku_id,))
    result = cursor.fetchone()
    connection.close()
    
    if result is None:
        raise HTTPException(status_code=404, detail="Buku not found")
    
    return {
        "id": result[0],
        "judul": result[1],
        "penulis": result[2],
        "penerbit": result[3],
        "tahun_terbit": result[4],
        "konten": result[5],
        "iktisar": result[6]
    }

# 4. Pembuatan Logger dan HTTPException
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@app.post("/buku/")
def create_buku_with_logging(buku: BukuModel):
    try:
        connection = mysql.connector.connect(
            host="localhost",
            user="root",
            password="password",
            database="perpustakaan"
        )
        
        cursor = connection.cursor()
        sql = "INSERT INTO buku (judul, penulis, penerbit, tahun_terbit, konten, iktisar) VALUES (%s, %s, %s, %s, %s, %s)"
        val = (buku.judul, buku.penulis, buku.penerbit, buku.tahun_terbit, buku.konten, buku.iktisar)
        cursor.execute(sql, val)
        connection.commit()
        connection.close()
        
        logger.info(f"Buku created successfully: {buku.judul}")
        return {"message": "Buku created successfully"}
    except mysql.connector.Error as err:
        logger.error(f"Error: {err}")
        raise HTTPException(status_code=500, detail="Internal Server Error")

@app.get("/buku/{buku_id}")
def read_buku_with_logging(buku_id: int):
    try:
        connection = mysql.connector.connect(
            host="localhost",
            user="root",
            password="password",
            database="perpustakaan"
        )
        
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM buku WHERE id = %s", (buku_id,))
        result = cursor.fetchone()
        connection.close()
        
        if result is None:
            raise HTTPException(status_code=404, detail="Buku not found")
        
        logger.info(f"Buku retrieved successfully: {result[1]}")
        return {
            "id": result[0],
            "judul": result[1],
            "penulis": result[2],
            "penerbit": result[3],
            "tahun_terbit": result[4],
            "konten": result[5],
            "iktisar": result[6]
        }
    except mysql.connector.Error as err:
        logger.error(f"Error: {err}")
        raise HTTPException(status_code=500, detail="Internal Server Error")
